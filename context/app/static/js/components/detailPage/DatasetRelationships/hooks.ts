import { useMemo } from 'react';
import { type Edge } from '@xyflow/react';
import useSWR from 'swr';
import { useAppContext } from 'js/components/Contexts';
import { NodeWithoutPosition } from './types';
import useProvData from '../provenance/hooks';
import { ProvData } from '../provenance/types';

export function useDatasetStatuses(datasets: { status?: string }[]) {
  const statuses = useMemo(() => {
    const statusSet = new Set(datasets.map(({ status }) => status).filter(Boolean));
    return Array.from(statusSet);
  }, [datasets]) as string[];
  return statuses;
}

export function useDatasetTypes(nodes: NodeWithoutPosition[]) {
  const types = useMemo(() => {
    const typeSet = new Set(nodes.map(({ type }) => type));
    return Array.from(typeSet);
  }, [nodes]) as string[];
  return types;
}

function generatePrefix(key: string) {
  return `hubmap:${key}`;
}

const entityPrefix = generatePrefix('entities');

function getCurrentEntityType(currentEntityIsComponent: boolean, currentEntityIsPrimary: boolean) {
  if (currentEntityIsPrimary) {
    return 'primaryDataset';
  }
  if (currentEntityIsComponent) {
    return 'componentDataset';
  }
  return 'processedDataset';
}

function convertProvDataToNodesAndEdges(primaryDatasetUuid: string, provData?: ProvData) {
  const nodes: NodeWithoutPosition[] = [];
  const edges: Edge[] = [];
  if (provData) {
    const { entity, activity, used, wasGeneratedBy } = provData;
    // First, add the primary entity as the starting point
    const primaryDatasetUUID = `${entityPrefix}/${primaryDatasetUuid}`;
    const primaryEntity = entity[primaryDatasetUUID];
    if (!primaryEntity) {
      return { nodes, edges };
    }
    // Maintain a queue of entities to process
    const queuedEntities: string[] = [primaryDatasetUUID];
    const componentDatasets = new Set<string>();
    while (queuedEntities.length > 0) {
      const queuedActivities: string[] = [];
      const currentEntityUUID = queuedEntities.shift()!;
      const currentEntity = entity[currentEntityUUID];
      if (!currentEntity) {
        // eslint-disable-next-line no-continue
        continue;
      }
      // Find all activities that used this entity
      const entityChildActivityEdges = Object.values(used).filter((edge) => edge['prov:entity'] === currentEntityUUID);
      entityChildActivityEdges.forEach((edge) => {
        const activityUUID = edge['prov:activity'];
        if (!queuedActivities.includes(activityUUID)) {
          queuedActivities.push(activityUUID);
        }
      });
      // Determine the type of the current entity
      const currentEntityIsComponent = componentDatasets.has(currentEntityUUID);
      const currentEntityIsPrimary = currentEntityUUID === primaryDatasetUUID;
      const currentEntityType = getCurrentEntityType(currentEntityIsComponent, currentEntityIsPrimary);

      // Add current entity as a node
      nodes.push({
        id: currentEntityUUID,
        type: currentEntityType,
        data: {
          name: currentEntity[generatePrefix('hubmap_id')],
          status: currentEntity[generatePrefix('status')],
          datasetType: currentEntity[generatePrefix('dataset_type')],
        },
      });
      // Iterate over all activities that used this entity
      queuedActivities.forEach((activityUUID) => {
        const currentActivity = activity[activityUUID];
        if (!currentActivity) {
          return;
        }
        // Find all entities that were generated by this activity and add them to the queue
        const activityChildEntityEdges = Object.values(wasGeneratedBy).filter(
          (edge) => edge['prov:activity'] === activityUUID,
        );
        activityChildEntityEdges.forEach((edge) => {
          const entityUUID = edge['prov:entity'];
          if (currentActivity[generatePrefix('creation_action')] === 'Multi-Assay Split') {
            componentDatasets.add(entityUUID);
          }
          if (!queuedEntities.includes(entityUUID)) {
            edges.push({
              id: `${activityUUID}-${entityUUID}`,
              source: activityUUID,
              target: entityUUID,
            });
            queuedEntities.push(entityUUID);
          }
        });
        // Add current activity as a node
        nodes.push({
          id: activityUUID,
          type: 'pipeline',
          data: {
            name: currentActivity[generatePrefix('creation_action')],
            status: currentActivity[generatePrefix('status')],
            childDatasets: activityChildEntityEdges.map((edge) => edge['prov:entity'].split('/')[1]),
            singleAssay: activityChildEntityEdges.length === 1,
          },
        });
        // Add edges between the current entity and the current activity
        edges.push({
          id: `${currentEntityUUID}-${activityUUID}`,
          source: currentEntityUUID,
          target: activityUUID,
          type: 'default',
        });
      });
    }
  }
  return { nodes, edges };
}

export function useDatasetRelationships(uuid: string) {
  const { provData, isLoading } = useProvData(uuid, true);
  const { nodes, edges } = useMemo(() => convertProvDataToNodesAndEdges(uuid, provData), [uuid, provData]);
  return { isLoading, nodes, edges };
}

interface PipelineInfoRequest {
  url: string;
  datasets: string[];
  groupsToken: string;
}

interface SoftAssayResponse {
  assaytype: string;
  'contains-pii': boolean;
  description: string;
  'pipeline-shorthand': string;
  primary: boolean;
  'vitessce-hints': string[];
}

async function fetchPipelineInfo({ url, datasets, groupsToken }: PipelineInfoRequest) {
  // Only fetch pipeline info if there is one dataset descendant
  if (datasets.length !== 1) {
    return Promise.resolve('');
  }
  const datasetId = datasets[0];
  const response = (await fetch(`${url}/${datasetId}`, {
    headers: {
      Authorization: `Bearer ${groupsToken}`,
    },
  }).then((res) => res.json())) as SoftAssayResponse;
  return response['pipeline-shorthand'];
}

export function usePipelineInfo(datasets: string[]) {
  const { groupsToken, softAssayEndpoint } = useAppContext();
  const url = `${softAssayEndpoint}/assaytype`;
  const { data: pipelineInfo, ...rest } = useSWR<string>({ url, datasets, groupsToken }, () =>
    fetchPipelineInfo({ url, datasets, groupsToken }),
  );
  return { pipelineInfo, ...rest };
}
