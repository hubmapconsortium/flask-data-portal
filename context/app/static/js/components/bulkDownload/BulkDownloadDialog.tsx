import React from 'react';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import Box from '@mui/material/Box';
import Skeleton from '@mui/material/Skeleton';
import Typography from '@mui/material/Typography';

import SummaryPaper from 'js/shared-styles/sections/SectionPaper';
import DialogModal from 'js/shared-styles/DialogModal';
import { BulkDownloadFormTypes, useBulkDownloadDialog } from 'js/components/bulkDownload/hooks';
import { SectionDescription } from 'js/shared-styles/sections/SectionDescription';
import Step from 'js/shared-styles/surfaces/Step';
import BulkDownloadOptionsField from 'js/components/bulkDownload/BulkDownloadOptionsField';
import BulkDownloadMetadataField from 'js/components/bulkDownload/BulkDownloadMetadataField';
import { OutboundLink } from 'js/shared-styles/Links';
import RelevantPagesSection from 'js/shared-styles/sections/RelevantPagesSection';
import BulkDownloadAdvancedSelections from 'js/components/bulkDownload/BulkDownloadAdvancedSelections';
import LabelledSectionText from 'js/shared-styles/sections/LabelledSectionText';
import { Alert } from 'js/shared-styles/alerts';
import { Control } from 'react-hook-form';

const links = {
  tutorial: 'TODO',
  installation: 'https://docs.hubmapconsortium.org/clt/install-hubmap-clt.html',
  documentation: 'https://docs.hubmapconsortium.org/clt/index.html',
};

const pages = [
  {
    link: links.tutorial,
    children: 'Tutorial',
  },
  {
    link: links.installation,
    children: 'HuBMAP CLT Installation',
    external: true,
  },
  {
    link: links.documentation,
    children: 'HuBMAP CLT Documentation',
    external: true,
  },
];

function BulkDownloadDescription() {
  return (
    <SectionDescription>
      <Stack spacing={2}>
        <Box>
          Choose download options to bulk download files from your selected datasets. Your selection of files will
          generate a manifest file, which can be used with the{' '}
          <OutboundLink href={links.documentation}>HuBMAP Command Line Transfer (CLT)</OutboundLink> tool for
          downloading. An option to download a tsv file of the metadata is also available.
        </Box>
        <Box>
          To download the files included in the manifest file,{' '}
          <OutboundLink href={links.installation}>install the HuBMAP CLT</OutboundLink> (if not already installed) and
          follow <OutboundLink href={links.documentation}>instructions</OutboundLink> for how to use it with the
          manifest file. A <OutboundLink href={links.tutorial}>tutorial</OutboundLink> is available to guide you through
          the entire process.
        </Box>
        <RelevantPagesSection pages={pages} />
      </Stack>
    </SectionDescription>
  );
}

function DownloadOptionsDescription() {
  return (
    <SectionDescription>
      <Stack spacing={2}>
        <Box>Select raw and/or processed files to download.</Box>
        <LabelledSectionText label="Raw Data" spacing={1}>
          Raw data consists of files as originally submitted by the data submitters. Individuals files for raw data
          cannot be previewed or selected for the manifest download. You must download all raw files, and the total
          download size cannot be estimated.
        </LabelledSectionText>
        <LabelledSectionText label="Processed Data" spacing={1}>
          Processed data includes files associated with data generated by HuBMAP using uniform processing pipelines or
          by an external processing approach. Only files centrally processed by HuBMAP are available for individual
          selection, which can be done in the Advanced Selections section below.
        </LabelledSectionText>
      </Stack>
    </SectionDescription>
  );
}

function DownloadSelection({
  control,
  downloadOptions,
  isLoading,
}: {
  control: Control<BulkDownloadFormTypes>;
  downloadOptions: {
    key: string;
    label: string;
  }[];
  isLoading: boolean;
}) {
  if (isLoading) {
    return <Skeleton variant="text" height="20rem" />;
  }

  return downloadOptions.length > 0 ? (
    <Step title="Download Options" hideRequiredText>
      <DownloadOptionsDescription />
      <SummaryPaper sx={{ marginBottom: 1 }}>
        <Stack direction="column" spacing={2}>
          <BulkDownloadOptionsField control={control} name="bulkDownloadOptions" />
          <BulkDownloadMetadataField control={control} name="bulkDownloadMetadata" />
        </Stack>
      </SummaryPaper>
      <BulkDownloadAdvancedSelections />
    </Step>
  ) : (
    <Box marginTop={1}>
      <Alert severity="warning">
        <Typography>Files are not available for any of the selected datasets.</Typography>
      </Alert>
    </Box>
  );
}

const formId = 'bulk-download-form';

function BulkDownloadDialog() {
  const { handleSubmit, onSubmit, handleClose, isOpen, errors, control, isLoading, downloadOptions } =
    useBulkDownloadDialog();

  return (
    <DialogModal
      title="Bulk Download Files"
      maxWidth="lg"
      content={
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        <form id={formId} onSubmit={handleSubmit(onSubmit)}>
          <Stack>
            <BulkDownloadDescription />
            <DownloadSelection control={control} downloadOptions={downloadOptions} isLoading={isLoading} />
          </Stack>
        </form>
      }
      isOpen={isOpen}
      handleClose={handleClose}
      actions={
        <Stack direction="row" spacing={2} alignItems="end">
          <Button type="button" onClick={handleClose}>
            Cancel
          </Button>
          <Button type="submit" variant="contained" form={formId} disabled={Object.keys(errors).length > 0}>
            Generate Download Manifest
          </Button>
        </Stack>
      }
      withCloseButton
    />
  );
}

export default BulkDownloadDialog;
