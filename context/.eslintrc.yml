extends:
  - eslint:recommended
  - plugin:react/recommended
  - airbnb
  - airbnb/hooks
  - prettier
  - plugin:prettier/recommended
  - plugin:import/errors
  - plugin:import/warnings
parser: '@typescript-eslint/parser'
globals:
  CDN_URL: readonly
  flaskData: readonly
  groupsToken: readonly
  isAuthenticated: readonly
  userEmail: readonly
  workspacesToken: readonly
  userGroups: readonly
env:
  browser: true
  node: true
plugins:
  - react
  - '@typescript-eslint'
  - import
  - prettier
settings:
  react:
    version: detect
  import/resolver:
    webpack:
      config: ./build-utils/webpack.common.js
rules:
  camelcase: [0] # Preserving original name will make searching across codebase easier.
  no-console: [error, { allow: [warn, error] }]
  react/jsx-filename-extension: [0] # Imports don"t work if I change extension.
  import/extensions: [0] # Same as above; we can eventually remove these rules to convert to ESM
  react/sort-comp: [0] # Non-alphabetical groupings can make more sense.
  react/jsx-one-expression-per-line: [0] # Makes punctuation after tab awkward.
  react/prop-types: [0]
  react/forbid-prop-types: [0]
  react/require-default-props: [0] # Not necessary; we can specify default props in the component signature.
  import/prefer-default-export: [0] # Hit eslint error: SyntaxError: Unexpected token, expected {
  react/jsx-props-no-spreading: [0] # common pattern, but with TypeScript it"s pretty safe
  jsx-a11y/label-has-associated-control:
    - 2
    - controlComponents:
        - Switch
  react/jsx-no-bind: [0] # We can revisit this later if we detect performance issues from unstable functions
  '@typescript-eslint/no-unused-vars':
    - 2 # Error on unmarked unused variables
    - argsIgnorePattern: ^_ # Allow unused variables that start with _
      ignoreRestSiblings: true # Allow unused variables when using destructuring to remove keys from an object

overrides:
  - files: ['**.{ts,tsx}']
    extends:
      - plugin:@typescript-eslint/recommended-type-checked
      - plugin:@typescript-eslint/stylistic-type-checked
    parserOptions:
      project: ./tsconfig.json
  - files: ['**/*.spec.{js,jsx,ts,tsx}', '**/__mocks__/**/*.{js,jsx,ts,tsx}']
    plugins:
      - jest
    extends:
      - plugin:jest/recommended
      - plugin:jest-dom/recommended
      - plugin:testing-library/react
    settings:
      import/resolver:
        jest:
          jestConfigFile: ./jest.config.js
    env:
      jest: true
      jest/globals: true
    rules:
      import/no-extraneous-dependencies: [0]
      '@typescript-eslint/no-var-requires': [0] # allow use of require in jest tests
      jest/no-standalone-expect: [error, { additionalTestBlockFunctions: [test.each] }] # Detect test.each as a test block function
      jest/expect-expect: [error, { assertFunctionNames: ['expect*'] }] # allow expect calls to be contained within helper functions that start with expect
      '@typescript-eslint/no-empty-function': [0] # allow empty function placeholders in jest tests
  - files: ['**/*.stories.{js,jsx,ts,tsx}']
    extends:
      - plugin:storybook/recommended
    rules:
      import/no-extraneous-dependencies: [0]
      '@typescript-eslint/no-empty-function': [0] # allow empty function placeholders in stories
      storybook/no-redundant-story-name: [0] # Some are needed for single story hoisting for multi word component names per comments - may need to be revisited/retested for the highlighted cases
  - files: ['**/end-to-end/**/*.{js,jsx,ts,tsx}']
    plugins:
      - cypress
    extends:
      - plugin:cypress/recommended
    env:
      cypress/globals: true
    rules:
      import/no-extraneous-dependencies: [0]
  - files: ['**/build-utils/*.js']
    rules:
      '@typescript-eslint/no-var-requires': [0] # allow use of require
      import/no-extraneous-dependencies: [0] # Allow devDependencies in webpack config
  - files: ['**/__tests__/**/*.{js,jsx,ts,tsx}'] # Allow the "test" global in test fixtures
    globals:
      test: readonly
    rules:
      import/no-extraneous-dependencies: [0] # Allow devDependencies in test fixtures
      '@typescript-eslint/no-empty-function': [0] # allow empty function placeholders in test fixtures
  - files: ['**/*.json']
    plugins: [json]
    extends: [plugin:json/recommended]
  - files: ['**/*.md']
    plugins: [markdown, prettier]
    processor: markdown/markdown
    extends: [plugin:markdown/recommended]
    rules:
      no-console: [0] # Allow console in markdown files
      import/no-unresolved: [0] # Allow unresolved imports in markdown files
      import/no-extraneous-dependencies: [0] # Allow devDependencies in markdown files
  - files: ['**/*.{yml,yaml}']
    parser: yaml-eslint-parser
    extends: ['plugin:yml/standard', 'plugin:yml/prettier', prettier]
