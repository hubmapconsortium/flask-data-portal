#!/usr/bin/env python3

import argparse
from pathlib import Path
import sys
from datetime import date
from dataclasses import dataclass
import csv
from itertools import groupby

import requests
from yaml import dump


def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '--target',
        type=dir_path,
        default=Path(__file__).parent.parent / 'context/app/organ',
        help='Target directory for markdown files')
    parser.add_argument(
        '--csv_url',
        default='https://hubmapconsortium.github.io/ccf-releases/v1.0/models/ASCT-B_3D_Models_Mapping.csv',
        help='ASCT+B Tables to 3D Reference Object Library Mapping CSV URL')
    args = parser.parse_args()

    _parse_asctb(args.csv_url)
    DirectoryWriter(args.target, [Organ(stem='heart', title='Heart')]).write()


def _parse_asctb(csv_url):
    csv_path = Path(__file__).parent / 'asctb.csv'
    if not csv_path.exists():
        csv_lines = requests.get(csv_url).text.split('\n')
        for i, line in enumerate(csv_lines):
            # Skip the header rows...
            if line.startswith('anatomical_structure_of'):
                break
        data_lines = csv_lines[i:]
        csv_path.write_text('\n'.join(data_lines))
    reader = csv.DictReader(csv_path.open())
    key_func = lambda row: row['anatomical_structure_of']
    rows = sorted(reader, key=key_func)
    groups = [
        {
            'id': key,
            'anatomy': {
                row['OntologyID']: {'label': row['label']} 
                for row in list_group
            },
            'glb': list_group[0]['glb file of single organs']
        }
        for key, group in groupby(rows, key_func)
        if (list_group := list(group))
    ]
    from pprint import pprint
    pprint(groups)


@dataclass
class Organ:
    stem: str
    title: str

    def yaml_front_matter(self):
        data = {'title': self.title}
        return f'---\n{dump(data)}---\n\n'


def dir_path(s):
    path = Path(s)
    if path.is_dir():
        return path
    else:
        raise ValueError(f'"{s}" is not a directory')


class DirectoryWriter():
    def __init__(self, dir, organs):
        self.dir = dir
        self.organs = organs
    def write(self):
        readme_text = f'Generated by {Path(__file__).name} on {date.today()}.'
        (self.dir / 'README.txt').write_text(readme_text)
        for organ in self.organs:
            self._write_organ(organ)
    def _write_organ(self, organ):
        file = self.dir / f"{organ.stem}.md"
        print(f'Writing to {file}...')
        file.write_text(
            organ.yaml_front_matter()
            + 'TODO'
        )
        

if __name__ == "__main__":
    sys.exit(main())  # pragma: no cover
